Cloud Architecture Terminologies:
Solution Archtect: architects a technical solution using multiple systems via resesarching, documentation, experimentation
Cloud Architect: solution architect focusing solely on architecting technical solutions using cloud services
Important factors to consider when designing solution architect:
- availability: ensure a service remains available
- scalability: ability to grow rapidly
- elastcity: ability shrink/grow to meed the demand
- fault tolerance
- disaster recovery
Also business factors:
- Security: how secure is the solution
- Cost: how much is this going to cost

High Availability: running workload across multiple AZs -> use Elastic Load Balancer: evenly distribute traffic to multiple servers in 1 or more datacenter -> only route the traffic to available/healthy datacenter with servers

High scalability: increase capacity based on the increasing demand of traffic/memory/computing power
- vertical scaling: upgrade to bigger server
- horizontal scaling: add more servers of the same size -> also increase availablity -> better

High elasticity: ability to AUTOMATICALLY increase or DECREASE (automatic and can go both ways) your capacity based on the current demand
- Horizonal scaling: scaling out vs. scaliing in
- Vertical scaling is generally harder
- Done through Auto Scaling Groups (ASG): AWS feature that automatically add/remove servers based on scaling rules

Fault Tolerance: ensure there's no single point of failure
- fail-overs: a plan to shift traffic to a redundant system in case the primary system fails
- example: have a copy of your database where all ongoing changes are synced -> not in use until a fail over occurs -> becomes the primary database -> RDS Multi-AZ: run duplicate standby database in another AZ 

High Durability: ability to recover from a disaster and to prevent the loss of data
- do you have a backup
- how fast can you restore that backup
- does your backup still work
- how do you ensure current live data is not corrupt
-> cloudendure disaster recovery: continuously replicates your machines into a low-cost staging area in your target AWS account and preferred region -> enable fast, reliable recovery in case of IT data center failures.

Business Continuity Plan: outlined how a business will continue operating during an unplanned disruption in services
- Recovery Point Objective (RPO): the maximum amount of data loss after an unplanned data-loss incident -> how much data are you willing to lose
- Recovery Time Objective (RTO): the maximum of downtime your business can tolerate -> how much time are you willing to go down

Disaster Recovery Option: tradeoff cost vs. time to recover 
- Backup & restore: backup data and restore it to new infrastructure -> RPO/RTO: hours
-> low priority, restore and deploy after event -> cheap
- Pilot light: data is replicated to another region with the minial services running -> RPO/RTO: 10 mins
-> core service, start and scale resources after event
- Warm standby: scaled down copy of your infrastructure running, ready to scale up -> RPO/RTO: minutes
-> business critical service, scale resource after event
- Multi-site active: scaled up copy of your infrastructure in another region -> RPO/RTO: real-time
-> mission critical service with zero downtime and near zero loss

Architectural diagram explained:
- need AWS architecture icon: https://aws.amazon.com/architecture/icons/

AWS API:
- API: software that allows 2 applications/services to talk to each other -> most common: HTTP/S requests
- AWS API: HTTP API -> can interact by sending HTTPS requets using things like Postman:
	+ each service has its own service endpoint to send request
	+ need a signed request -> make a separate request with AWS credentials to get back a token
- rare use API directly but:
	+ use AWS Management Console: web interface -> operate through ClickOps i.e. via clicks
	+ AWS SDK: interact with API using programming language
	+ AWS CLI: interact via a terminal/shell program
-> docs.aws.amazon.com for further details

Amazon Resource Name (ARN): uniquely identify Amazon resources -> specify resource unambiguusly across all of AWS
- ARN format:
	+ arn:partition:service:region:account-id:resource-id
	+ arn:partition:service:region:account-id:resource-type/resource-id
	+ arn:partition:service:region:account-id:resource-type:resource-id
- partition: 
	+ aws: AWS regions
	+ aws-cn: China regions
	+ aws-us-gov: AWS GovCloud
- service: ec2, s3, iam
- region: us-east-1, ca-central-1
- account id: 12 digit id
- resource id: user/Bon, instance/i-12345
-> can be used in IAM policy

AWS CLI: Python executable program -> aws
- configure: aws configure --profile anleV1 import --csv file_path

